# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL. 

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#Then I inserted the Spotify Data .csv into the table.

#Next, I explored the data using the following SQL. 

#1. Which artist had the highest average popularity?
SELECT distinct artist_name, AVG (popularity)
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY artist_name desc
LIMIT 1

#2. Which 3 time signature song had the highest tempo?
SELECT track_name, tempo
FROM BIT_DB.Spotifydata
WHERE time_signature = 3
GROUP BY track_name
ORDER BY tempo desc
LIMIT 1

#3. What is the average danceability by artist and track? 
SELECT artist_name, track_name, AVG (danceability)
FROM BIT_DB.Spotifydata 
GROUP BY artist_name, track_name

#4. Who are the top 10 artists based on popularity? 
SELECT artist_name, track_name, popularity
FROM BIT_DB.Spotifydata 
ORDER BY popularity desc
LIMIT 10;

#5. What artist released the longest song? 
SELECT artist_name, MAX(duration_ms)
FROM BIT_DB.Spotifydata

#6. Assign a ranking name to the popularity of each song.
SELECT track_name, popularity,
CASE WHEN popularity >= 90 THEN 'High'
WHEN popularity >= 85 THEN 'Medium'
WHEN popularity >= 78 THEN 'Low'
ELSE 'Least'
END AS popularity_ranking
FROM BIT_DB.Spotifydata
ORDER BY track_name desc;
